import { Injectable, Component, NgModule, defineInjectable, inject } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
class Angular2SwapiService {
    /**
     * @param {?} _http
     */
    constructor(_http) {
        this._http = _http;
        this.TAG = 'Angular2 Swapi Service : ';
        this.swapiUrl = 'https://swapi.co/api/';
    }
    /**
     * Add page value url param
     * @param {?} page
     * @return {?}
     */
    getByPage(page) {
        if (page) {
            return '&page=' + page;
        }
        else {
            return '';
        }
    }
    /**
     * Return list of people as observable
     * @param {?=} page
     * @return {?}
     */
    getPeople(page) {
        return this._http.get(`${this.swapiUrl}people?format=json${this.getByPage(page)}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return people by id
     * @param {?} id
     * @return {?}
     */
    getPeopleById(id) {
        return this._http.get(`${this.swapiUrl}people/${id}?format=json`)
            .pipe(catchError(this.handleError));
    }
    /**
     * Search people by name
     * @param {?} name
     * @return {?}
     */
    searchPeople(name) {
        return this._http.get(`${this.swapiUrl}people?search=${name}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return list of films as observable
     * @param {?=} page
     * @return {?}
     */
    getFilms(page) {
        return this._http.get(`${this.swapiUrl}films?format=json${this.getByPage(page)}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return film by id
     * @param {?} id
     * @return {?}
     */
    getFilm(id) {
        return this._http.get(`${this.swapiUrl}films/${id}?format=json`)
            .pipe(catchError(this.handleError));
    }
    /**
     * Search films by title
     * @param {?} title
     * @return {?}
     */
    searchFilms(title) {
        return this._http.get(`${this.swapiUrl}films?search=${title}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return list of starships
     * @param {?=} page
     * @return {?}
     */
    getStarships(page) {
        return this._http.get(`${this.swapiUrl}starships?format=json${this.getByPage(page)}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return starship by id
     * @param {?} id
     * @return {?}
     */
    getStarship(id) {
        return this._http.get(`${this.swapiUrl}starships/${id}?format=json`)
            .pipe(catchError(this.handleError));
    }
    /**
     * Search starships by name
     * @param {?} name
     * @return {?}
     */
    searchStarships(name) {
        return this._http.get(`${this.swapiUrl}starships?search=${name}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return list of vehicles as observable
     * @param {?=} page
     * @return {?}
     */
    getVehicles(page) {
        return this._http.get(`${this.swapiUrl}vehicles?format=json${this.getByPage(page)}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return vehicle by id
     * @param {?} id
     * @return {?}
     */
    getVehicle(id) {
        return this._http.get(`${this.swapiUrl}vehicles/${id}?format=json`)
            .pipe(catchError(this.handleError));
    }
    /**
     * Search vehicles by name
     * @param {?} name
     * @return {?}
     */
    searchVehicles(name) {
        return this._http.get(`${this.swapiUrl}vehicles?search=${name}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Retrun list of species as observable
     * @param {?=} page
     * @return {?}
     */
    getSpecies(page) {
        return this._http.get(`${this.swapiUrl}species?format=json${this.getByPage(page)}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return species by id
     * @param {?} id
     * @return {?}
     */
    getSpeciesById(id) {
        return this._http.get(`${this.swapiUrl}species/${id}?format=json`)
            .pipe(catchError(this.handleError));
    }
    /**
     * Search species by name
     * @param {?} name
     * @return {?}
     */
    searchSpecies(name) {
        return this._http.get(`${this.swapiUrl}species?search=${name}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     *  Return list od planets as observable
     * @param {?=} page
     * @return {?}
     */
    getPlanets(page) {
        return this._http.get(`${this.swapiUrl}planets?format=json${this.getByPage(page)}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return planet by id
     * @param {?} id
     * @return {?}
     */
    getPlanet(id) {
        return this._http.get(`${this.swapiUrl}planets/${id}?format=json`)
            .pipe(catchError(this.handleError));
    }
    /**
     * Search planets by name
     * @param {?} name
     * @return {?}
     */
    searchPlanets(name) {
        return this._http.get(`${this.swapiUrl}planets?search=${name}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Handle HTTP Errors
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        if (error.error instanceof ErrorEvent) {
            // A client-side or network error occurred. Handle it accordingly.
            console.error(`${this.TAG} An error occurred:`, error.error.message);
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            console.error(`${this.TAG} Backend returned code ${error.status}, ` +
                `body was: ${error.error}`);
        }
        // return an observable with a user-facing error message
        return throwError(`${this.TAG} Something bad happened; please try again later.`);
    }
}
Angular2SwapiService.ɵfac = function Angular2SwapiService_Factory(t) { return new (t || Angular2SwapiService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
Angular2SwapiService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Angular2SwapiService, factory: Angular2SwapiService.ɵfac, providedIn: 'root' });
/** @nocollapse */
Angular2SwapiService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ Angular2SwapiService.ngInjectableDef = defineInjectable({ factory: function Angular2SwapiService_Factory() { return new Angular2SwapiService(inject(HttpClient)); }, token: Angular2SwapiService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Angular2SwapiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Angular2SwapiComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
Angular2SwapiComponent.ɵfac = function Angular2SwapiComponent_Factory(t) { return new (t || Angular2SwapiComponent)(); };
Angular2SwapiComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Angular2SwapiComponent, selectors: [["lib-angular2-swapi"]], decls: 2, vars: 0, template: function Angular2SwapiComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p");
        ɵngcc0.ɵɵtext(1, " angular2-swapi works! ");
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
/** @nocollapse */
Angular2SwapiComponent.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Angular2SwapiComponent, [{
        type: Component,
        args: [{
                selector: 'lib-angular2-swapi',
                template: `
    <p>
      angular2-swapi works!
    </p>
  `,
                styles: []
            }]
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Angular2SwapiModule {
}
Angular2SwapiModule.ɵfac = function Angular2SwapiModule_Factory(t) { return new (t || Angular2SwapiModule)(); };
Angular2SwapiModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: Angular2SwapiModule });
Angular2SwapiModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[HttpClientModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Angular2SwapiModule, { declarations: function () { return [Angular2SwapiComponent]; }, imports: function () { return [HttpClientModule]; }, exports: function () { return [Angular2SwapiComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Angular2SwapiModule, [{
        type: NgModule,
        args: [{
                imports: [HttpClientModule],
                declarations: [Angular2SwapiComponent],
                exports: [Angular2SwapiComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { Angular2SwapiService, Angular2SwapiComponent, Angular2SwapiModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjItc3dhcGkuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXIyLXN3YXBpL2xpYi9hbmd1bGFyMi1zd2FwaS5zZXJ2aWNlLnRzIiwiYW5ndWxhcjItc3dhcGkvbGliL2FuZ3VsYXIyLXN3YXBpLmNvbXBvbmVudC50cyIsImFuZ3VsYXIyLXN3YXBpL2xpYi9hbmd1bGFyMi1zd2FwaS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUE2QjtBQUFRO0FBQ3BCO0FBQVEsSUFhdkIsWUFBb0IsS0FBaUI7QUFBSSxRQUFyQixVQUFLLEdBQUwsS0FBSyxDQUFZO0FBQUMsbUJBSGhDLDJCQUEyQjtBQUNuQyx3QkFBYSx1QkFBdUI7QUFDcEMsS0FDNEM7QUFDNUM7QUFFQztBQUNFO0FBQ2lCO0FBQ2pCO0FBQVEsSUFEVCxTQUFTLENBQUMsSUFBWTtBQUFJLFFBQ3hCLElBQUksSUFBSSxFQUFFO0FBQUUsWUFBQSxPQUFPLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFBQyxTQUFDO0FBQUMsYUFBSztBQUFFLFlBQUEsT0FBTyxFQUFFLENBQUM7QUFBQyxTQUFDO0FBQzdELEtBQUc7QUFDSDtBQUVDO0FBQ0U7QUFDa0I7QUFBbUI7QUFBUSxJQUE5QyxTQUFTLENBQUMsSUFBYTtBQUFJLFFBQ3pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxxQkFBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ2hHLGFBQWUsSUFBSSxDQUNILEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQzVCLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQzdCLENBQUM7QUFDaEIsS0FBRztBQUNIO0FBRUM7QUFDRTtBQUNlO0FBQW1CO0FBQVEsSUFBM0MsYUFBYSxDQUFDLEVBQVU7QUFBSSxRQUMxQixPQUFPLElBQUksQ0FB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Q0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFqT0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQVBBLEFBQUEsQUNEQSxBQWFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFkQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUlBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQ1ZBLEFBSUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IgIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBQZW9wbGUsIEZpbG0sIFN0YXJzaGlwLCBWZWhpY2xlLCBTcGVjaWVzLCBQbGFuZXQgfSBmcm9tICcuL2FuZ3VsYXIyLXN3YXBpLm1vZGVscyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXIyU3dhcGlTZXJ2aWNlIHtcblxuICBUQUcgPSAnQW5ndWxhcjIgU3dhcGkgU2VydmljZSA6ICc7XG4gIHN3YXBpVXJsID0gJ2h0dHBzOi8vc3dhcGkuY28vYXBpLyc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaHR0cDogSHR0cENsaWVudCkgeyB9XG5cbiAgLyoqXG4gICAqIEFkZCBwYWdlIHZhbHVlIHVybCBwYXJhbVxuICAgKi9cbiAgZ2V0QnlQYWdlKHBhZ2U6IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKHBhZ2UpIHsgcmV0dXJuICcmcGFnZT0nICsgcGFnZTsgfSBlbHNlIHsgcmV0dXJuICcnOyB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGxpc3Qgb2YgcGVvcGxlIGFzIG9ic2VydmFibGVcbiAgICovXG4gIGdldFBlb3BsZShwYWdlPzogbnVtYmVyKTogT2JzZXJ2YWJsZTxQZW9wbGVbXT4ge1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldDxQZW9wbGVbXT4oYCR7dGhpcy5zd2FwaVVybH1wZW9wbGU/Zm9ybWF0PWpzb24ke3RoaXMuZ2V0QnlQYWdlKHBhZ2UpfWApXG4gICAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcChyZXNwID0+IHJlc3BbJ3Jlc3VsdHMnXSksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKVxuICAgICAgICAgICAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBwZW9wbGUgYnkgaWRcbiAgICovXG4gIGdldFBlb3BsZUJ5SWQoaWQ6IG51bWJlcik6IE9ic2VydmFibGU8UGVvcGxlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0PFBlb3BsZT4oYCR7dGhpcy5zd2FwaVVybH1wZW9wbGUvJHtpZH0/Zm9ybWF0PWpzb25gKVxuICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKHRoaXMuaGFuZGxlRXJyb3IpXG4gICAgICAgICAgICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU2VhcmNoIHBlb3BsZSBieSBuYW1lXG4gICAqL1xuICBzZWFyY2hQZW9wbGUobmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxQZW9wbGVbXT4ge1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldDxQZW9wbGVbXT4oYCR7dGhpcy5zd2FwaVVybH1wZW9wbGU/c2VhcmNoPSR7bmFtZX1gKVxuICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAocmVzcCA9PiByZXNwWydyZXN1bHRzJ10pLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcilcbiAgICAgICAgICAgICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gbGlzdCBvZiBmaWxtcyBhcyBvYnNlcnZhYmxlXG4gICAqL1xuICBnZXRGaWxtcyhwYWdlPzogbnVtYmVyKTogT2JzZXJ2YWJsZTxGaWxtW10+IHtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQ8RmlsbVtdPihgJHt0aGlzLnN3YXBpVXJsfWZpbG1zP2Zvcm1hdD1qc29uJHt0aGlzLmdldEJ5UGFnZShwYWdlKX1gKVxuICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAocmVzcCA9PiByZXNwWydyZXN1bHRzJ10pLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcilcbiAgICAgICAgICAgICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gZmlsbSBieSBpZFxuICAgKi9cbiAgZ2V0RmlsbShpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxGaWxtPiB7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0PEZpbG0+KGAke3RoaXMuc3dhcGlVcmx9ZmlsbXMvJHtpZH0/Zm9ybWF0PWpzb25gKVxuICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKHRoaXMuaGFuZGxlRXJyb3IpXG4gICAgICAgICAgICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU2VhcmNoIGZpbG1zIGJ5IHRpdGxlXG4gICAqL1xuICBzZWFyY2hGaWxtcyh0aXRsZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxGaWxtW10+IHtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQ8RmlsbVtdPihgJHt0aGlzLnN3YXBpVXJsfWZpbG1zP3NlYXJjaD0ke3RpdGxlfWApXG4gICAgLnBpcGUoXG4gICAgICBtYXAocmVzcCA9PiByZXNwWydyZXN1bHRzJ10pLFxuICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKVxuICAgICk7XG4gIH1cblxuLyoqXG4gKiBSZXR1cm4gbGlzdCBvZiBzdGFyc2hpcHNcbiAqL1xuZ2V0U3RhcnNoaXBzKHBhZ2U/OiBudW1iZXIpOiBPYnNlcnZhYmxlPFN0YXJzaGlwW10+IHtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQ8U3RhcnNoaXBbXT4oYCR7dGhpcy5zd2FwaVVybH1zdGFyc2hpcHM/Zm9ybWF0PWpzb24ke3RoaXMuZ2V0QnlQYWdlKHBhZ2UpfWApXG4gICAgLnBpcGUoXG4gICAgICBtYXAocmVzcCA9PiByZXNwWydyZXN1bHRzJ10pLFxuICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHN0YXJzaGlwIGJ5IGlkXG4gICAqL1xuICBnZXRTdGFyc2hpcChpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxTdGFyc2hpcD4ge1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldDxTdGFyc2hpcD4oYCR7dGhpcy5zd2FwaVVybH1zdGFyc2hpcHMvJHtpZH0/Zm9ybWF0PWpzb25gKVxuICAgIC5waXBlKFxuICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU2VhcmNoIHN0YXJzaGlwcyBieSBuYW1lXG4gICAqL1xuICBzZWFyY2hTdGFyc2hpcHMobmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxTdGFyc2hpcFtdPiB7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0PFN0YXJzaGlwW10+KGAke3RoaXMuc3dhcGlVcmx9c3RhcnNoaXBzP3NlYXJjaD0ke25hbWV9YClcbiAgICAucGlwZShcbiAgICAgIG1hcChyZXNwID0+IHJlc3BbJ3Jlc3VsdHMnXSksXG4gICAgICBjYXRjaEVycm9yKHRoaXMuaGFuZGxlRXJyb3IpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gbGlzdCBvZiB2ZWhpY2xlcyBhcyBvYnNlcnZhYmxlXG4gICAqL1xuICBnZXRWZWhpY2xlcyhwYWdlPzogbnVtYmVyKTogT2JzZXJ2YWJsZTxWZWhpY2xlW10+IHtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQ8VmVoaWNsZVtdPihgJHt0aGlzLnN3YXBpVXJsfXZlaGljbGVzP2Zvcm1hdD1qc29uJHt0aGlzLmdldEJ5UGFnZShwYWdlKX1gKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChyZXNwID0+IHJlc3BbJ3Jlc3VsdHMnXSksXG4gICAgICAgIGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcilcbiAgICAgICk7XG4gICAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdmVoaWNsZSBieSBpZFxuICAgKi9cbiAgZ2V0VmVoaWNsZShpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxWZWhpY2xlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0PFZlaGljbGU+KGAke3RoaXMuc3dhcGlVcmx9dmVoaWNsZXMvJHtpZH0/Zm9ybWF0PWpzb25gKVxuICAgIC5waXBlKFxuICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU2VhcmNoIHZlaGljbGVzIGJ5IG5hbWVcbiAgICovXG4gIHNlYXJjaFZlaGljbGVzKG5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8VmVoaWNsZVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0PFZlaGljbGVbXT4oYCR7dGhpcy5zd2FwaVVybH12ZWhpY2xlcz9zZWFyY2g9JHtuYW1lfWApXG4gICAgLnBpcGUoXG4gICAgICBtYXAocmVzcCA9PiByZXNwWydyZXN1bHRzJ10pLFxuICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cnVuIGxpc3Qgb2Ygc3BlY2llcyBhcyBvYnNlcnZhYmxlXG4gICAqL1xuICBnZXRTcGVjaWVzKHBhZ2U/OiBudW1iZXIpOiBPYnNlcnZhYmxlPFNwZWNpZXNbXT4ge1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldDxTcGVjaWVzW10+KGAke3RoaXMuc3dhcGlVcmx9c3BlY2llcz9mb3JtYXQ9anNvbiR7dGhpcy5nZXRCeVBhZ2UocGFnZSl9YClcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAocmVzcCA9PiByZXNwWydyZXN1bHRzJ10pLFxuICAgICAgICBjYXRjaEVycm9yKHRoaXMuaGFuZGxlRXJyb3IpXG4gICAgICApO1xuICAgIH1cblxuICAvKipcbiAgICogUmV0dXJuIHNwZWNpZXMgYnkgaWRcbiAgICovXG4gIGdldFNwZWNpZXNCeUlkKGlkOiBudW1iZXIpOiBPYnNlcnZhYmxlPFNwZWNpZXM+IHtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQ8U3BlY2llcz4oYCR7dGhpcy5zd2FwaVVybH1zcGVjaWVzLyR7aWR9P2Zvcm1hdD1qc29uYClcbiAgICAucGlwZShcbiAgICAgIGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcilcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlYXJjaCBzcGVjaWVzIGJ5IG5hbWVcbiAgICovXG4gIHNlYXJjaFNwZWNpZXMobmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxTcGVjaWVzW10+IHtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQ8U3BlY2llc1tdPihgJHt0aGlzLnN3YXBpVXJsfXNwZWNpZXM/c2VhcmNoPSR7bmFtZX1gKVxuICAgIC5waXBlKFxuICAgICAgbWFwKHJlc3AgPT4gcmVzcFsncmVzdWx0cyddKSxcbiAgICAgIGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcilcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqICBSZXR1cm4gbGlzdCBvZCBwbGFuZXRzIGFzIG9ic2VydmFibGVcbiAgICovXG4gIGdldFBsYW5ldHMocGFnZT86IG51bWJlcik6IE9ic2VydmFibGU8UGxhbmV0W10+IHtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQ8UGxhbmV0W10+KGAke3RoaXMuc3dhcGlVcmx9cGxhbmV0cz9mb3JtYXQ9anNvbiR7dGhpcy5nZXRCeVBhZ2UocGFnZSl9YClcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAocmVzcCA9PiByZXNwWydyZXN1bHRzJ10pLFxuICAgICAgICBjYXRjaEVycm9yKHRoaXMuaGFuZGxlRXJyb3IpXG4gICAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBwbGFuZXQgYnkgaWRcbiAgICovXG4gIGdldFBsYW5ldChpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxQbGFuZXQ+IHtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQ8UGxhbmV0PihgJHt0aGlzLnN3YXBpVXJsfXBsYW5ldHMvJHtpZH0/Zm9ybWF0PWpzb25gKVxuICAgICAgLnBpcGUoXG4gICAgICAgIGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcilcbiAgICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU2VhcmNoIHBsYW5ldHMgYnkgbmFtZVxuICAgKi9cbiAgc2VhcmNoUGxhbmV0cyhuYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFBsYW5ldFtdPiB7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0PFBsYW5ldFtdPihgJHt0aGlzLnN3YXBpVXJsfXBsYW5ldHM/c2VhcmNoPSR7bmFtZX1gKVxuICAgIC5waXBlKFxuICAgICAgbWFwKHJlc3AgPT4gcmVzcFsncmVzdWx0cyddKSxcbiAgICAgIGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcilcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBIVFRQIEVycm9yc1xuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICBpZiAoZXJyb3IuZXJyb3IgaW5zdGFuY2VvZiBFcnJvckV2ZW50KSB7XG4gICAgICAvLyBBIGNsaWVudC1zaWRlIG9yIG5ldHdvcmsgZXJyb3Igb2NjdXJyZWQuIEhhbmRsZSBpdCBhY2NvcmRpbmdseS5cbiAgICAgIGNvbnNvbGUuZXJyb3IoYCR7dGhpcy5UQUd9IEFuIGVycm9yIG9jY3VycmVkOmAsIGVycm9yLmVycm9yLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgYmFja2VuZCByZXR1cm5lZCBhbiB1bnN1Y2Nlc3NmdWwgcmVzcG9uc2UgY29kZS5cbiAgICAgIC8vIFRoZSByZXNwb25zZSBib2R5IG1heSBjb250YWluIGNsdWVzIGFzIHRvIHdoYXQgd2VudCB3cm9uZyxcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGAke3RoaXMuVEFHfSBCYWNrZW5kIHJldHVybmVkIGNvZGUgJHtlcnJvci5zdGF0dXN9LCBgICtcbiAgICAgICAgYGJvZHkgd2FzOiAke2Vycm9yLmVycm9yfWApO1xuICAgIH1cbiAgICAvLyByZXR1cm4gYW4gb2JzZXJ2YWJsZSB3aXRoIGEgdXNlci1mYWNpbmcgZXJyb3IgbWVzc2FnZVxuICAgIHJldHVybiB0aHJvd0Vycm9yKFxuICAgICAgYCR7dGhpcy5UQUd9IFNvbWV0aGluZyBiYWQgaGFwcGVuZWQ7IHBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuYCk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbGliLWFuZ3VsYXIyLXN3YXBpJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8cD5cbiAgICAgIGFuZ3VsYXIyLXN3YXBpIHdvcmtzIVxuICAgIDwvcD5cbiAgYCxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBBbmd1bGFyMlN3YXBpQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQW5ndWxhcjJTd2FwaUNvbXBvbmVudCB9IGZyb20gJy4vYW5ndWxhcjItc3dhcGkuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0h0dHBDbGllbnRNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtBbmd1bGFyMlN3YXBpQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW0FuZ3VsYXIyU3dhcGlDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXIyU3dhcGlNb2R1bGUgeyB9XG4iXX0=